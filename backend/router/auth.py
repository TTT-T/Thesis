#  import FastAPI Router ‡πÅ‡∏•‡∏∞ dependencies
from fastapi import APIRouter, HTTPException, Depends, Form
from sqlalchemy.orm import Session

#  ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ decode_jwt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ token ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
from backend.utils.security import decode_jwt

#  ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
from backend.database import get_db

#  import model User ‡∏ó‡∏µ‡πà map ‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
from backend.models.user_model import User

#  import ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á current user ‡∏à‡∏≤‡∏Å JWT
from backend.utils.security import get_current_user

#  import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ hash password
from passlib.context import CryptContext

#  ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á JWT ‡∏´‡∏•‡∏±‡∏á login
from backend.utils.security import create_jwt

#  ‡∏™‡∏£‡πâ‡∏≤‡∏á router ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° auth/email
router = APIRouter()

# ======  Endpoint: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏• ======
@router.get("/verify-email")
def verify_email(token: str, db: Session = Depends(get_db)):
    try:
        #  ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ JWT ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á email ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô field "sub"
        payload = decode_jwt(token)
        email = payload.get("sub")

        #  ‡∏ñ‡πâ‡∏≤ token ‡πÑ‡∏°‡πà‡∏°‡∏µ email ‚Üí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î
        if not email:
            raise HTTPException(status_code=400, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô token")

        #  ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å email ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å token
        user = db.query(User).filter(User.email == email).first()
        if not user:
            raise HTTPException(status_code=404, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ")

        #  ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        user.is_verified = True  # üîí ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ field ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô model
        db.commit()

        return {"message": "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß "}
    except Exception as e:
        #  token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ / ‡∏õ‡∏•‡∏≠‡∏° ‚Üí ‡πÅ‡∏à‡πâ‡∏á error
        raise HTTPException(status_code=400, detail="Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏")


# ======  Endpoint: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å JWT ======
@router.get("/me")
def get_me(
    db: Session = Depends(get_db),
    current_user=Depends(get_current_user)
):
    # ‡πÉ‡∏ä‡πâ email ‡∏à‡∏≤‡∏Å JWT
    email = current_user["sub"]

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å DB
    user = db.query(User).filter(User.email == email).first()

    if not user:
        raise HTTPException(status_code=404, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ")

    # ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• profile ‡πÄ‡∏ï‡πá‡∏°
    return {
        "email": user.email,
        "first_name_th": user.first_name_th,
        "last_name_th": user.last_name_th,
        "phone": user.phone,
        "house_no": user.house_no,
        "sub_district": user.sub_district,
        "district": user.district,
        "province": user.province,
        "postal_code": user.postal_code,
    }


#  ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö password
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# ======  Endpoint: login ‡∏î‡πâ‡∏ß‡∏¢ email/password ======
@router.post("/login")
def login(
    email: str = Form(...),        #  ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å form-data
    password: str = Form(...),
    db: Session = Depends(get_db)
):
    #  ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å email
    user = db.query(User).filter(User.email == email).first()

    #  ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö user ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if not user or not pwd_context.verify(password, user.hashed_password):
        raise HTTPException(status_code=401, detail="‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

    #  ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‚Üí ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
    if not user.is_verified:
        raise HTTPException(status_code=403, detail="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Å‡πà‡∏≠‡∏ô")

    #  ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT ‡∏ó‡∏µ‡πà‡∏ù‡∏±‡∏á email ‡πÅ‡∏•‡∏∞ role ‡∏•‡∏á‡πÑ‡∏õ
    token = create_jwt({
        "sub": user.email,
        "role": user.role
    })

    return {"access_token": token, "token_type": "bearer"}



"""
üì¶ ‡∏£‡∏∞‡∏ö‡∏ö Authentication + Email Verification ‡πÉ‡∏ô FastAPI

‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ 3 endpoint:

1.  /verify-email?token=...
   - ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≠‡∏î JWT token ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö email ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ is_verified=True

2.  /me
   - ‡πÉ‡∏ä‡πâ Depends(get_current_user) ‚Üí ‡∏Ñ‡∏∑‡∏ô payload JWT ‡∏ó‡∏µ‡πà decode ‡πÅ‡∏•‡πâ‡∏ß
   - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ dashboard ‡∏´‡∏£‡∏∑‡∏≠ profile

3.  /login
   - ‡∏£‡∏±‡∏ö email/password ‡∏à‡∏≤‡∏Å form
   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà, ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á, ‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡πâ‡∏ß
   - ‡∏Ñ‡∏∑‡∏ô access_token (JWT) ‚Üí ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á route ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á login

    ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:
- ‡πÉ‡∏ä‡πâ JWT ‡πÄ‡∏õ‡πá‡∏ô payload ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (sub = email, role)
- ‡πÅ‡∏¢‡∏Å role ‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‚Üí ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö require_role ‡πÑ‡∏î‡πâ
- ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢ bcrypt + token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏

    ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö frontend Next.js ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
‡πÄ‡∏ä‡πà‡∏ô: ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‚Üí ‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‚Üí ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå ‚Üí ‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‚Üí ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö

"""
